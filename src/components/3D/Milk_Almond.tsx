/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { GradientTexture, useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Milk: THREE.Mesh;
  };
  materials: {};
};

export default function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("./3D/Milk.glb") as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Milk.geometry}
        material={nodes.Milk.material}
        rotation={[Math.PI / 2, 0, 0]}
      >
        <meshPhysicalMaterial
          // transparent
          opacity={0.9}
          transmission={0.8}
          thickness={1}
        >
          <GradientTexture
            stops={[0.1, 1]} // As many stops as you want
            colors={["white", "yellow"]} // Colors need to match the number of stops
            size={1024} // Size is optional, default = 1024
          />
        </meshPhysicalMaterial>
      </mesh>
    </group>
  );
}

useGLTF.preload("/Milk.glb");
